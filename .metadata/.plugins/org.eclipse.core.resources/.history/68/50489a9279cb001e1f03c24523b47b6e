package com.algaworks.algafood.domain.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.algaworks.algafood.domain.exception.EntidadeEmUsoException;
import com.algaworks.algafood.domain.exception.PermissaoNaoEncontradoException;
import com.algaworks.algafood.domain.model.Permissao;
import com.algaworks.algafood.domain.model.Produto;
import com.algaworks.algafood.domain.repository.PermissaoRepository;


@Service
public class CadastroPermissaoService {
	
	private static final String MSG_PERMISSAO_EM_USO 
	= "Permissão de código %d não pode ser removida, pois está em uso";

    @Autowired
    private PermissaoRepository permissaoRepository;
    
    
    public List<Permissao> listar(){
    	return permissaoRepository.findAll();
    }
    
    public Permissao buscar(Long id) {
    	return permissaoRepository.findById(id).get();
    }
    
    public Permissao buscarOuFalhar(Long permissaoId, Long grupoId) {
        return permissaoRepository.findById(permissaoId, grupoId)
            .orElseThrow(() -> new PermissaoNaoEncontradoException(grupoId, permissaoId ));
    } 
    
    @Transactional
    public Permissao salvar(Permissao permissao) {
        
        return permissaoRepository.save(permissao);
    }
    
    @Transactional
    public void excluir(Long permissaoId) {
        try {
        	permissaoRepository.deleteById(permissaoId); 
        	permissaoRepository.flush(); //forçar operações do BD p/ não pular exceção
        } catch (EmptyResultDataAccessException e) {
            throw new PermissaoNaoEncontradoException(permissaoId);
        
        } catch (DataIntegrityViolationException e) {
            throw new EntidadeEmUsoException(
                String.format(MSG_PERMISSAO_EM_USO, permissaoId));
        }
    }
    
}
