package com.algaworks.algafood.domain.model;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Data
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@Entity
public class Restaurante {

	@EqualsAndHashCode.Include
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	private String nome;

	@Column(name = "taxa_frete")
	private BigDecimal taxaFrete;

	@ManyToOne
	private Cozinha cozinha;
	
	@JsonIgnore 
	@CreationTimestamp  //cria automaticamente o datetime na criação da entidade
	@Column(nullable = false, columnDefinition = "datetime")
	private LocalDateTime dataCadastro;
	
	@JsonIgnore
	@UpdateTimestamp
	@Column(nullable = false, columnDefinition = "datetime")
	private LocalDateTime dataAtualizacao;
	
	@JsonIgnore
	@Embedded  // vai incorporar informações da classe endereço
	private Endereco endereco;  // 6.4. Mapeando classes incorporáveis com @Embedded e @Embeddable
	
	@ManyToMany  
	@JoinTable(name = "restaurante_forma_pagamento",             // <- nome da tabela criada
			joinColumns = @JoinColumn(name = "restaurante_id"),   // <- nome do ID referência de restaurante
			inverseJoinColumns = @JoinColumn(name = "forma_pagamento_id"))  // <- nome do ID referência de forma_pagamento
	private List<FormaPagamento> formasPagamento = new ArrayList<>();
}
